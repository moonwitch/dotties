#
# SXHKD module with WM-agnostic keys
# Partial configuration file for the Simple X Hotkey Daemon.  Meant to
# work with `bspwm`.  This is part of my dotfiles, which are managed
# with GNU Stow.  See https://github.com/moonwitch/dotties
#


# Environment
# -----------
# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd && notify-send "Reloaded key bindings"

# Reload bspwm
super + shift + BackSpace
	$HOME/.config/bspwm/bspwmrc && notify-send "Reloaded bspwm"

# Session management (lock, logout, reboot, shutdown).
# Can also be invoked with super + e ; q (as defined above).
ctrl + alt + {Home,End,Delete}
	{xautolock -locknow, bspc quit, systemctl suspend}

# Rofi
super + {_,shift + }d
	rofi -show {drun, run}

alt + Tab
	rofi -kb-accept-entry '!Alt-Tab' -kb-row-down Alt-Tab -show window

super + shift + n
	networkmanager_dmenu

# Bring up the help text for common keybindings
super + {F1,Home}
	xterm -class "my_float_window" \
	-geometry '100x30' -e less "$HOME/.config/sxhkd/cheatsheet_sxhkdrc.txt"


# Main programs
# -------------
#Terminal and draw terminal

super + {_,shift + }Return
	{$TERMINAL, st}

super + shift + {e,w,g,f}
	{$FILEMAN, $BROWSER, code-oss,firefox }

# Utilities
# -------------
# Screenshots (requires `scrot`).
Print
    scrot $HOME/'Pictures/Screenshots/%Y-%m-%d_%H%M%S-$wx$h_scrot.png' && notify-send "Fullscreen view screenshot" "Saved image to $HOME/Pictures/Screenshots"
    #maim -s | xclip -selection clipboard -t image/png

control + Print
    maim -i $(xdotool getactivewindow) $HOME/'Pictures/Screenshots/%Y-%m-%d_%H%M%S-$wx$h_scrot.png' && notify-send "Active window snap saved to $HOME/Pictures/Screenshots" $$ xclip -selection clipboard -t image/png

alt + Print
    scrot --select $HOME/'Pictures/Screenshots/%Y-%m-%d_%H%M%S-$wx$h_scrot.png' && notify-send "Selected window snap saved to $HOME/Pictures/Screenshots"

# -------------
# bspwm hotkeys
# -------------

# close and kill
super + {_,shift + }q
	bspc node --{close,kill}

# alternate between the tiled and monocle layout
super + m
	bspc desktop --layout next

# swap the current node and the biggest node
super + g
	bspc node --swap biggest

# set the window state
super + ~{t,p,s,f}
	bspc node --state {tiled,pseudo_tiled,floating,fullscreen}
# Set the state of the selected window.
# If ~ is present and the current state
# matches the given state, then the argument is
# interpreted as the last state.

# set the node flags
super + ctrl + ~{m,x,y,z}
	bspc node --flag {marked,locked,sticky,private}

# Equalize and Balance
super + alt + {e,b}
	bspc node --{equalize,balance}
#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{Left,Down,Up,Right}
	bspc node --{focus,swap} {west,south,north,east}

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop --focus {prev,next}.local

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop --focus,node --to-desktop} '^{1-9,10}'

#
# preselect
#

# preselect the direction; ~ acts as cancel if already applied
super + ctrl + {h,j,k,l}
	bspc node --presel-dir ~{west,south,north,east}

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node --resize {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node --resize {right -20 0,top 0 20,bottom 0 -20,left 20 0}
